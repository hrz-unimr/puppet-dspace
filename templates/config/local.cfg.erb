# EXAMPLE "local.cfg" for DSpace.
#
# Any configurations added to this file will automatically OVERRIDE configurations
# of the same name in any of the DSpace *.cfg files. This includes overriding
# settings in any of these files:
#    * [dspace]/config/dspace.cfg
#    * Or any configuration file that is included in 'dspace.cfg'
#     (See "include = [filepath]" settings near the end of dspace.cfg.
#      By default, it includes all [dspace]/config/modules/*.cfg files)
#
# By default, this EXAMPLE file includes a number of commonly overridden configurations.
# * ADD configurations by simply copying them into this file from any existing *.cfg file.
# * REMOVE configurations by simply commenting them out or deleting them below.
#
# Any commented out settings in this file are simply ignored. A configuration
# will only override another configuration if it has the EXACT SAME key/name.
# For example, including "dspace.dir" in this local.cfg will override the
# default value of "dspace.dir" in the dspace.cfg file.
# Similarly, including "oai.solr.url" in this local.cfg will override the
# default value of "oai.solr.url" in the modules/oai.cfg file.
#


##########################
# SERVER CONFIGURATION   #
##########################

# DSpace installation directory.
# This is the location where you want to install DSpace.
# Windows note: Please remember to use forward slashes for all paths (e.g. C:/dspace)
dspace.dir=<%=scope['dspace::configuration::dspace_dir']%>

# DSpace host name - should match base URL.  Do not include port number
dspace.hostname = <%=scope['dspace::configuration::dspace_hostname']%>

# DSpace base host URL.  Include port number etc.
dspace.baseUrl = <%=scope['dspace::configuration::dspace_base_url']%>

# The user interface you will be using for DSpace. Common usage is either xmlui or jspui
dspace.ui = xmlui

# Full link your end users will use to access DSpace. In most cases, this will be the baseurl followed by
# the context path to the UI you are using.
#
# Alternatively, you can use a url redirect or deploy the web application under the servlet container root.
# In this case, make sure to remove the /${dspace.ui} from the dspace.url property.
#dspace.url = ${dspace.baseUrl}/${dspace.ui}
dspace.url = ${dspace.baseUrl}

# Name of the site
dspace.name = <%=scope['dspace::configuration::dspace_name']%>

# assetstore.dir, look at DSPACE/config/spring/api/bitstore.xml for more options
# default is ${dspace.dir}/assetstore, uncomment and modify if you need to use a different path
assetstore.dir = <%=scope['dspace::configuration::assetstore_dir']%>

# Default language for metadata values
default.language = <%=scope['dspace::configuration::default_language']%>
# Supported languages
webui.supported.locales = <%=scope['dspace::configuration::supported_languages']%>

# Solr server/webapp.
# DSpace uses Solr for all search/browse capability (and for usage statistics by default).
# The included 'solr' webapp MUST be deployed to Tomcat for DSpace to function.
# Usually it will be available via port 8080 and the 'solr' context path. But,
# But, you may need to modify this if you are running DSpace on a custom port, etc.
solr.server = http://<%=scope['dspace::configuration::index_host']%>:<%=scope['dspace::configuration::index_port']%>/solr

##########################
# DATABASE CONFIGURATION #
##########################
# DSpace only supports two database types: PostgreSQL or Oracle

# URL for connecting to database
#    * Postgres template: jdbc:postgresql://localhost:5432/dspace
#    * Oracle template: jdbc:oracle:thin:@//localhost:1521/xe
db.url = jdbc:postgresql://<%=scope['dspace::configuration::database_host']%>:<%=scope['dspace::configuration::database_port']%>/<%=scope['dspace::configuration::database_name']%>

# JDBC Driver
#    * For Postgres: org.postgresql.Driver
#    * For Oracle:   oracle.jdbc.OracleDriver
db.driver = org.postgresql.Driver

# Database Dialect (for Hibernate)
#    * For Postgres: org.dspace.storage.rdbms.hibernate.postgres.DSpacePostgreSQL82Dialect
#    * For Oracle:   org.hibernate.dialect.Oracle10gDialect
db.dialect = org.dspace.storage.rdbms.hibernate.postgres.DSpacePostgreSQL82Dialect

# Database username and password
db.username = <%=scope['dspace::configuration::database_user']%>
db.password = <%=scope['dspace::configuration::database_passwd']%>

# Database Schema name
#    * For Postgres, this is often "public" (default schema)
#    * For Oracle, schema is equivalent to the username of your database account,
#      so this may be set to ${db.username} in most scenarios.
db.schema = public

## Connection pool parameters

# Maximum number of DB connections in pool (default = 30)
db.maxconnections = <%=scope['dspace::configuration::database_maxconnections']%>

# Maximum time to wait before giving up if all connections in pool are busy (milliseconds)
# (default = 5000ms or 5 seconds)
db.maxwait = <%=scope['dspace::configuration::database_maxwait']%>

# Maximum number of idle connections in pool (-1 = unlimited)
# (default = 10)
db.maxidle = <%=scope['dspace::configuration::database_maxidle']%>


#######################
# EMAIL CONFIGURATION #
#######################

# SMTP mail server (allows DSpace to send email notifications)
mail.server = <%=scope['dspace::configuration::mail_host']%>

# SMTP mail server alternate port (defaults to 25)
mail.server.port = <%=scope['dspace::configuration::mail_port']%>

# SMTP mail server authentication username and password (if required)
mail.server.username = <%=scope['dspace::configuration::mail_user']%>
mail.server.password = <%=scope['dspace::configuration::mail_pass']%>

# From address for mail
# All mail from the DSpace site will use this 'from' address
mail.from.address = <%=scope['dspace::configuration::mail_sender']%>

# When feedback is submitted via the Feedback form, it is sent to this address
# Currently limited to one recipient!
feedback.recipient = <%=scope['dspace::configuration::mail_feedback_address']%>

# General site administration (Webmaster) e-mail
mail.admin = <%=scope['dspace::configuration::mail_admin_address']%>

# Recipient for server errors and alerts (defaults to mail.admin)
alert.recipient = <%=scope['dspace::configuration::mail_alert_address']%>

# Recipient for new user registration emails (defaults to unspecified)
#registration.notify =


########################
# HANDLE CONFIGURATION #
########################
#
# Canonical Handle URL prefix
#
# Items in DSpace receive a unique URL, stored in dc.identifier.uri
# after it is generated during the submission process.
#
# If you register with CNRI's handle service at http://www.handle.net/,
# these links can be generated as permalinks using http://hdl.handle.net/
# as canonical prefix. Please make sure to change handle.canonical.prefix
# after registering with handle.net by uncommenting one of the following
# lines, depending if you prefer to use http or https:
# handle.canonical.prefix = http://hdl.handle.net/
# handle.canonical.prefix = https://hdl.handle.net/
#
# Note that this will not alter dc.identifer.uri metadata for existing
# items (only for subsequent submissions), but it will alter the URL
# in JSPUI's 'identifier' message on item record pages for existing items.

# CNRI Handle prefix
# (Defaults to a dummy/fake prefix of 123456789)
handle.prefix = <%=scope['dspace::configuration::handle_prefix']%>

#######################
# PROXY CONFIGURATION #
#######################

<% if scope['dspace::configuration::proxy_url'] != '' -%>
# proxy server for external http requests - use regular hostname without port number
<%= scope['dspace::configuration::proxy_proto'] %>.proxy.host = <%= scope['dspace::configuration::proxy_host'] %>

# port number of proxy server
<%= scope['dspace::configuration::proxy_proto'] %>.proxy.port = <%= scope['dspace::configuration::proxy_port'] %>
<% end -%>

#####################
# LOGLEVEL SETTINGS #
#####################

# Loglevel for dspace
# (Defaults to INFO)
loglevel.dspace = <%=scope['dspace::configuration::log_level']%>

# Loglevel for third-party softwares
# (Defaults to INFO)
loglevel.other = ${loglevel.dspace}

##########################
# AUTHENTICATION METHODS #
##########################
# EXAMPLE OVERRIDE:
# Override the default authentication method(s) defined in authentication.cfg
# by defining your own custom ordered list in this local.cfg.
#
# By default, all of these methods are commented out and DSpace will use the
# settings from authentication.cfg. But you may uncomment whichever plugins you
# need in order to change the default settings (or reorder them below).
#
# You may also copy default settings from the corresponding authentication-*.cfg
# configuration file and override them in this local.cfg.

# IP-based authentication/authorization. See authentication-ip.cfg for default configuration.
#plugin.sequence.org.dspace.authenticate.AuthenticationMethod = org.dspace.authenticate.IPAuthentication

<% if scope['dspace::configuration::authentication_method'].include? "org.dspace.authenticate.PasswordAuthentication" -%>
# Authentication by Password (encrypted in DSpace's database). See authentication-password.cfg for default configuration.
# Enabled by default in authentication.cfg
plugin.sequence.org.dspace.authenticate.AuthenticationMethod = org.dspace.authenticate.PasswordAuthentication
<% end -%>

<% if scope['dspace::configuration::authentication_method'].include? "org.dspace.authenticate.LDAPAuthentication" -%>
# LDAP authentication/authorization. See authentication-ldap.cfg for default configuration.
plugin.sequence.org.dspace.authenticate.AuthenticationMethod = org.dspace.authenticate.LDAPAuthentication
authentication-ldap.enable = true
authentication-ldap.provider_url = ldap://<%=scope['dspace::configuration::ldap_provider_url']%>
authentication-ldap.search.user = <%=scope['dspace::configuration::ldap_search_user'].split(",").join("\\,")%>
authentication-ldap.search.password = <%=scope['dspace::configuration::ldap_search_passwd']%>
<% end -%>

# Shibboleth authentication/authorization. See authentication-shibboleth.cfg for default configuration.
#plugin.sequence.org.dspace.authenticate.AuthenticationMethod = org.dspace.authenticate.ShibAuthentication

<% if scope['dspace::configuration::authentication_method'].include? "org.dspace.authenticate.ShibAuthentication" -%>
# LDAP authentication/authorization. See authentication-ldap.cfg for default configuration.
plugin.sequence.org.dspace.authenticate.AuthenticationMethod = org.dspace.authenticate.ShibAuthentication
authentication-shibboleth.lazysession = true
authentication-shibboleth.lazysession.secure = true
authentication-shibboleth.lazysession.loginurl = /Shibboleth.sso/Login
authentication-shibboleth.autoregister = true
authentication-shibboleth.netid-header = eppn
authentication-shibboleth.email-header = mail
authentication-shibboleth.email-use-tomcat-remote-user = false
authentication-shibboleth.firstname-header = givenName
authentication-shibboleth.lastname-header = sn
authentication-shibboleth.eperson.metadata.autocreate = true
authentication-shibboleth.eperson.metadata = \
 telephoneNumber => phone, \
 cn => cn
authentication-shibboleth.reconvert.attributes = false
authentication-shibboleth.sword.compatibility = false
#authentication-shibboleth.role-header.ignore-scope = true
#authentication-shibboleth.role-header.ignore-value = true
#authentication-shibboleth.role-header = SHIB_SCOPED_AFFILIATION
#authentication-shibboleth.role.faculty = Faculty, Member
#authentication-shibboleth.role.staff = Staff, Member
#authentication-shibboleth.role.student = Students, Member
<% end -%>

# X.509 certificate authentication. See authentication-x509.cfg for default configuration.
#plugin.sequence.org.dspace.authenticate.AuthenticationMethod = org.dspace.authenticate.X509Authentication

<% if not scope['dspace::configuration::doi_datacite_user'] == '' -%>
###########################
# DATACITE DOI MANAGEMENT #
###########################
# Credentials used to authenticate against DataCite:
identifier.doi.user = <%=scope['dspace::configuration::doi_datacite_user']%>
identifier.doi.password = <%=scope['dspace::configuration::doi_datacite_passwd']%>
identifier.doi.prefix = <%=scope['dspace::configuration::doi_datacite_prefix']%>
identifier.doi.namespaceseparator = <%=scope['dspace::configuration::doi_datacite_namespace']%>
<% end -%>

<% if scope['dspace::configuration::doi_datacite'] == true -%>
event.consumer.doi.class = org.dspace.identifier.doi.DOIConsumer
event.consumer.doi.filters = Item+Modify_Metadata
<% end -%>



##########
# Events #
##########
<%  # Add additional values to event_consumers if they are set.

    if scope['dspace::configuration::doi_datacite'] == true
        scope['dspace::configuration::event_consumers'] << 'doi'
    end

    if scope['dspace::configuration::item_versioning'] == true
        scope['dspace::configuration::event_consumers'] << 'versioning'
    end
%>
event.dispatcher.default.consumers = <%=scope['dspace::configuration::event_consumers'].join(', ')%>

<% if not scope['dspace::configuration::own_configuration'] == '' -%>
# Include own configuration file for Institution's specific code
include = <%=scope['dspace::configuration::own_configuration']%>
<% end -%>